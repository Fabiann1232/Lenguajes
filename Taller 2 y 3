
"""Taller 2 y 3.ipynb

**1. Lista de tokens**
"""

#Importe el módulo usando import ply.lex
import ply.lex as lex #factor el cual tiene a lex como termino
import ply.yacc as yacc #factor el cual tiene a yacc como termino
#Todos los lexers deben proporcionar una lista llamada tokens que defina todos
#los posibles nombres de tokens que puede producir el lexer.
tokens = ( #termino que contiene un factor y una expresion aritmetica
 'NUMBER', #termino dentro del cual se agrupa uno o varios numeros
 'PLUS',  #termino dentro del cual  hay un simbolo terminal y una operacion aritmetica
 'MINUS', #termino dentro del cual hay una operacion aritmetica
 'TIMES', #termino dentro del cual  hay un simbolo terminal  y una operacion aritmetica
 'DIVIDE',  #termino dentro del cual hay una operacion aritmetica
 'LPAREN',  #termino que contiene un factor
 'RPAREN' #termino que contiene un factor
)

"""**2. Expresiones regulares para los tokens**"""

#La regla de expresiones regulares para cada
#cadena se puede definir como una cadena o como una función
t_PLUS = r'\+' #termino el cual contiene un simbolo terminal y una expresion aritmetica
t_MINUS = r'-'  #termino el cual contiene una expresion aritmetica y una expresion aritmetica
t_TIMES = r'\*' #termino el cual contiene un simbolo terminal y una expresion aritmetica
t_DIVIDE = r'/' #termino el cual contiene una expresion aritmetica y una expresion aritmetica
t_LPAREN = r'\(' #termino que contiene un factor y una expresion aritmetica
t_RPAREN = r'\)' #termino que contiene un factor y una expresion aritmetica
#Para tokens simples, la expresión regular se puede especificar como cadenas: t_PLUS = r'\+'

"""**3- Funcion para manejar los tokesn ignorados (espacios y tabulaciones)**"""

#Funcion que maneja los tokens ignorados.
def t_ignore_SPACE(t): #termino el cual contiene un factor
 r'\s+' #termino el cual contiene una expresion terminal
 pass #termino

"""**4. Funcion para manejar errores de caracteres invalidos**"""

#Maneja los caracteres invalidos
def t_error(t): #termino el cual contiene un factor
 print(f"Carácter inválido: '{t.value[0]}'") #termino el cual contiene un factor a la par de un numero
 t.lexer.skip(1) #factor el cual contiene un numero

"""**5. Donde empieza el analizador lexico**"""

#Construye el lexer
lexer = lex.lex() #termino el cual contiene un factor y una expresion aritmetica

"""**6.  Reglas de precedencia para los operadores**"""

#El establecimiento de la precedencia y
#la asociatividad se puede realizar mediante la variable de precedencia.
precedence = ( # termino el cual tiene una expresion aritmetica  y un factor
 ('left', 'PLUS', 'MINUS'), #factor el cual tiene terminos de los cuales se encuentra un simbolo terminal y una expresion aritmetica
 ('left', 'TIMES', 'DIVIDE'), #factor el cual tiene terminos de los cuales se encuentra un simbolo terminal y una expresion aritmetica
)

"""**7. Regla para expresiones matemáticas**"""

# Las declaraciones que componen el cuerpo de la función implementan las acciones semánticas de la regla
def p_expression(p): #termino el cual contiene un factor
 '''
 expression : expression PLUS term #termino que contiene un simbolo terminal
 | expression MINUS term #termino que contiene una expresion aritmetica
 | term #termino
 '''
 if len(p) == 2: #termino el cual contiene un factor y a su vez una expresion aritmetica y un numero
#Los valores de se asignan a símbolos gramaticales como se muestra aquí:p[i]
 p[0] = p[1]  #termino el cual contiene a su vez una expresion aritmetica y un numero
 else: #termino
 if p[2] == '+': #termino el cual contiene un simbolo terminal, una expresion aritmetica y un numero
 p[0] = p[1] + p[3]  #termino el cual contiene a su vez una expresion aritmetica y un numero
 elif p[2] == '-':  #termino el cual contiene una expresion aritmetica y un numero
 p[0] = p[1] - p[3]  #termino el cual contiene a su vez una expresion aritmetica y un numero

"""**8. Regla para términos**"""

#Se especifican los terminos que queremos detectar en la "prueba", en este caso expresiones aritmeticas simples

def p_term(p): #termino el cual contiene un factor
 '''
 term : term TIMES factor
 | term DIVIDE factor
 | factor
 '''
 if len(p) == 2: #termino el cual contiene un factor y a su vez una expresion aritmetica y un numero
 p[0] = p[1] #termino el cual contiene a su vez una expresion aritmetica y un numero
 else: #termino
 if p[2] == '*': #termino el cual contien un simbolo terminal, una expresion aritmetica y un numero
 p[0] = p[1] * p[3] #termino el cual contiene a su vez una expresion aritmetica y un numero
 elif p[2] == '/': #termino el cual contien un simbolo terminal, una expresion aritmetica y un numero
 p[0] = p[1] / p[3] #termino el cual contiene a su vez una expresion aritmetica y un numero

"""**9. Regla para factores**"""

#factor se refiere a reglas gramaticales compuestas por una colección de terminales y otras reglas. Este identificador se conocen como no terminales.

def p_factor(p): #termino el cual contiene un factor
 '''
 factor : NUMBER
 | LPAREN expression RPAREN
 '''
 if len(p) == 2: #termino el cual contiene un facto y a su vez una expresion aritmetica y un numero
 p[0] = p[1]#termino el cual contiene a su vez una expresion aritmetica y un numero
 else:#termino
 p[0] = p[2]#termino el cual contiene a su vez una expresion aritmetica y un numero

"""**10. Función para manejar errores de sintaxis**"""

#La funcion se llama cuando se detecta un error sintactico para notificarle al usuario

def p_error(p): #termino el cual contiene un factor
 print(f"Error de sintaxis en la entrada: '{p.value}'") #termino el cual contiene un factor a la par de un numero
 raise SyntaxError("Error de sintaxis") #La instrucción raise toma un mensaje de error como argumento y lo eleva como una excepción. El mensaje de error puede ser cualquier cadena.

"""**11. Construimos el analizador sintáctico**"""

#La primera regla definida en la especificación yacc determina el símbolo gramatical inicial (en este caso, aparece primero una regla para la expresión).
#Cada vez que el parser reduce la regla inicial y no hay más entradas disponibles, el análisis se detiene y se devuelve el valor final (este valor será
#cualquiera que sea la regla superior colocada en p[0]).
#Nota: se puede especificar un símbolo de inicio alternativo usando el argumento de palabra clave de inicio para yacc().

parser = yacc.yacc() #termino el cual contiene una expresion aritmetica y un factor.

"""**12. Función para realizar el análisis semántico**"""

#Se crea una funcion que se encarga de realizar la evaluacion para comprobar si el input es correcto

def evaluate(expression): #termino el cual contiene un factor
 result = parser.parse(expression) #termino el cual contiene una expresion aritmetica y un factor.
 return result #termino

"""**13. Cuál es el ejercicio de entrada**

"""

#Se crea la cadena con la que se hara la prueba de todas las reglas anteriores y su correcto funcionamiento

input_expression = "3 + 5 * ( 2 - 4 )" #termino en el cual hay factores y muestra una cadena con expresiones aritmeticas y numeros

"""**14. Donde se realiza el análisis semántico**"""

#Se pasa la cadena anterior para evaluarla y posteriormente se imprime el resultado de la prueba

result = evaluate(input_expression) #termino el cual contiene una expresion aritmetica y un factor.
print(f"Resultado: {result}") #termino el cual contiene un factor a la par de un numero(result)
